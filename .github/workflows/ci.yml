name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FORGE_VERSION: nightly-2024-01-01
  GO_VERSION: 1.21
  NODE_VERSION: 18

jobs:
  # Solidity contract tests
  solidity-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FORGE_VERSION }}

      - name: Install dependencies
        run: |
          forge install
          forge build

      - name: Run Solidity tests
        run: |
          forge test --gas-report --coverage
          forge coverage --report lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./lcov.info
          flags: solidity

      - name: Run Slither static analysis
        uses: crytic/slither-action@v0.2.0
        with:
          target: src/
          args: --filter-paths "test/|script/|lib/"

  # Go operator tests
  go-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd avs-operator
          go mod download
          go mod tidy

      - name: Run Go tests
        run: |
          cd avs-operator
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload Go coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./avs-operator/coverage.out
          flags: go

      - name: Run Go security scan
        run: |
          cd avs-operator
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./...

      - name: Run Go linting
        run: |
          cd avs-operator
          go install golang.org/x/lint/golint@latest
          golint ./...

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FORGE_VERSION }}

      - name: Run security audit
        run: |
          forge install
          forge build
          forge test --gas-report

      - name: Run Mythril analysis
        uses: ConsenSys/mythril-action@v1
        with:
          target: src/
          output: sarif
          sarif-file: mythril-results.sarif

      - name: Upload Mythril results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: mythril-results.sarif

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          cd avs-operator
          go mod download

      - name: Run integration tests
        run: |
          cd avs-operator
          go test -v -tags=integration ./...

  # Build and test Docker images
  docker-build:
    runs-on: ubuntu-latest
    needs: [solidity-tests, go-tests, security-audit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build AVS Operator image
        uses: docker/build-push-action@v5
        with:
          context: ./avs-operator
          push: false
          tags: eigencrosscow/avs-operator:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm eigencrosscow/avs-operator:latest --help

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [solidity-tests, go-tests, security-audit, integration-tests, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [solidity-tests, go-tests, security-audit, integration-tests, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here

  # Performance tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [solidity-tests, go-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          cd avs-operator
          go mod download

      - name: Run performance tests
        run: |
          cd avs-operator
          go test -v -tags=performance -bench=. ./...

  # Documentation generation
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FORGE_VERSION }}

      - name: Generate documentation
        run: |
          forge doc --build
          # Add other documentation generation commands

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
